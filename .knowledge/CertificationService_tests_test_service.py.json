{"is_source_file": true, "format": "Python", "description": "This file contains unit tests for the CertificationService module, testing workflow creation, stage progression, status updates, and error handling using pytest and asyncio.", "external_files": ["src.api.models", "src.api.repository"], "external_methods": ["src.api.repository.compute_overall_status"], "published": [], "classes": [], "methods": [{"name": "build_create_request( *, domain: Domain = Domain.CORE, author: str | None = \"alice\", stages: list[CertificationStage] | None = None, notify_on_start: bool = True, notify_on_finish: bool = True, )", "description": "Helper function to construct a WorkflowCreateRequest with default or specified parameters.", "scope": "", "scopeKind": ""}, {"name": "test_create_workflow_initializes_and_triggers(service, notifier)", "description": "Tests that creating a workflow initializes correctly and triggers notifications.", "scope": "", "scopeKind": ""}, {"name": "test_kickoff_advances_stages_to_succeeded(service)", "description": "Verifies that stages are advanced and the workflow reaches a succeeded state.", "scope": "", "scopeKind": ""}, {"name": "test_update_stage_status_flow(service)", "description": "Tests updating stage statuses and overall workflow state.", "scope": "", "scopeKind": ""}, {"name": "test_error_handling_when_execution_client_raises(monkeypatch, service)", "description": "Checks handling of exceptions during stage triggers, ensuring workflow failure is recorded.", "scope": "", "scopeKind": ""}, {"name": "boom(*args, **kwargs)", "scope": "test_error_handling_when_execution_client_raises", "scopeKind": "function", "description": "unavailable"}], "calls": ["service.create_workflow", "service.get_workflow", "service.update_stage_status", "compute_overall_status"], "search-terms": ["test_service.py", "pytest", "asyncio", "WorkflowCreateRequest", "StageStatus", "CertificationStage", "test_create_workflow", "test_kickoff_advances", "test_update_stage_status", "test_error_handling"], "state": 2, "file_id": 12, "knowledge_revision": 33, "git_revision": "ee36d2e6f5fa8f901391e32cbd2d09e066d407bf", "revision_history": [{"28": ""}, {"33": "ee36d2e6f5fa8f901391e32cbd2d09e066d407bf"}], "ctags": [{"_type": "tag", "name": "boom", "path": "/home/kavia/workspace/code-generation/certificationtest-198-341/CertificationService/tests/test_service.py", "pattern": "/^    async def boom(*args, **kwargs):$/", "file": true, "language": "Python", "kind": "function", "signature": "(*args, **kwargs)", "scope": "test_error_handling_when_execution_client_raises", "scopeKind": "function"}, {"_type": "tag", "name": "build_create_request", "path": "/home/kavia/workspace/code-generation/certificationtest-198-341/CertificationService/tests/test_service.py", "pattern": "/^def build_create_request($/", "language": "Python", "kind": "function", "signature": "( *, domain: Domain = Domain.CORE, author: str | None = \"alice\", stages: list[CertificationStage] | None = None, notify_on_start: bool = True, notify_on_finish: bool = True, )"}, {"_type": "tag", "name": "test_create_workflow_initializes_and_triggers", "path": "/home/kavia/workspace/code-generation/certificationtest-198-341/CertificationService/tests/test_service.py", "pattern": "/^async def test_create_workflow_initializes_and_triggers(service, notifier):$/", "language": "Python", "kind": "function", "signature": "(service, notifier)"}, {"_type": "tag", "name": "test_error_handling_when_execution_client_raises", "path": "/home/kavia/workspace/code-generation/certificationtest-198-341/CertificationService/tests/test_service.py", "pattern": "/^async def test_error_handling_when_execution_client_raises(monkeypatch, service):$/", "language": "Python", "kind": "function", "signature": "(monkeypatch, service)"}, {"_type": "tag", "name": "test_kickoff_advances_stages_to_succeeded", "path": "/home/kavia/workspace/code-generation/certificationtest-198-341/CertificationService/tests/test_service.py", "pattern": "/^async def test_kickoff_advances_stages_to_succeeded(service):$/", "language": "Python", "kind": "function", "signature": "(service)"}, {"_type": "tag", "name": "test_update_stage_status_flow", "path": "/home/kavia/workspace/code-generation/certificationtest-198-341/CertificationService/tests/test_service.py", "pattern": "/^async def test_update_stage_status_flow(service):$/", "language": "Python", "kind": "function", "signature": "(service)"}], "hash": "baa8d2098d06ad7b0fed5cea0d045104", "format-version": 4, "code-base-name": "CertificationService", "filename": "CertificationService/tests/test_service.py"}