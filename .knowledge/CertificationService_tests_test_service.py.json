{"is_source_file": true, "format": "Python", "description": "This is a test module for the CertificationWorkflowService module, containing multiple async unit tests using pytest and asyncio. It verifies workflow creation, stage progression, status updates, and error handling in the certification process.", "external_files": ["src/api/models", "src/api/repository", "src/api/service"], "external_methods": ["src.api.repository.compute_overall_status", "src.api.service.CertificationWorkflowService.create_workflow", "src.api.service.CertificationWorkflowService.get_workflow", "src.api.service.CertificationWorkflowService.update_stage_status"], "published": [], "classes": [], "methods": [{"name": "build_create_request( *, domain: Domain = Domain.CORE, author: str | None = \"alice\", stages: list[CertificationStage] | None = None, notify_on_start: bool = True, notify_on_finish: bool = True, )", "description": "Helper function to construct a WorkflowCreateRequest with default parameters and sample data.", "scope": "", "scopeKind": ""}, {"name": "test_create_workflow_initializes_and_triggers(service, notifier)", "description": "Async test verifying that a workflow can be created and triggers the initial notification correctly.", "scope": "", "scopeKind": ""}, {"name": "test_kickoff_advances_stages_to_succeeded(service)", "description": "Async test confirming that after initial creation, stages progress to 'SUCCEEDED' and relevant data fields are populated.", "scope": "", "scopeKind": ""}, {"name": "test_update_stage_status_flow(service)", "description": "Async test that simulates stage status updates and verifies proper reflection in workflow state.", "scope": "", "scopeKind": ""}, {"name": "test_error_handling_when_execution_client_raises(monkeypatch, service)", "description": "Async test simulating an exception during stage trigger to ensure failure paths are properly handled and reported.", "scope": "", "scopeKind": ""}, {"name": "boom(*args, **kwargs)", "scope": "test_error_handling_when_execution_client_raises", "scopeKind": "function", "description": "unavailable"}], "calls": ["src.api.service.CertificationWorkflowService.create_workflow", "src.api.service.CertificationWorkflowService.get_workflow", "src.api.service.CertificationWorkflowService.update_stage_status", "asyncio.sleep"], "search-terms": ["pytest", "asyncio", "CertificationWorkflowService", "test_service.py", "StageStatus", "WorkflowCreateRequest", "WorkflowUpdateStatusRequest", "test_create_workflow", "test_kickoff", "test_update_stage", "test_error_handling"], "state": 2, "file_id": 12, "knowledge_revision": 28, "git_revision": "", "ctags": [{"_type": "tag", "name": "boom", "path": "/home/kavia/workspace/code-generation/certificationtest-198-341/CertificationService/tests/test_service.py", "pattern": "/^    async def boom(*args, **kwargs):$/", "file": true, "language": "Python", "kind": "function", "signature": "(*args, **kwargs)", "scope": "test_error_handling_when_execution_client_raises", "scopeKind": "function"}, {"_type": "tag", "name": "build_create_request", "path": "/home/kavia/workspace/code-generation/certificationtest-198-341/CertificationService/tests/test_service.py", "pattern": "/^def build_create_request($/", "language": "Python", "kind": "function", "signature": "( *, domain: Domain = Domain.CORE, author: str | None = \"alice\", stages: list[CertificationStage] | None = None, notify_on_start: bool = True, notify_on_finish: bool = True, )"}, {"_type": "tag", "name": "test_create_workflow_initializes_and_triggers", "path": "/home/kavia/workspace/code-generation/certificationtest-198-341/CertificationService/tests/test_service.py", "pattern": "/^async def test_create_workflow_initializes_and_triggers(service, notifier):$/", "language": "Python", "kind": "function", "signature": "(service, notifier)"}, {"_type": "tag", "name": "test_error_handling_when_execution_client_raises", "path": "/home/kavia/workspace/code-generation/certificationtest-198-341/CertificationService/tests/test_service.py", "pattern": "/^async def test_error_handling_when_execution_client_raises(monkeypatch, service):$/", "language": "Python", "kind": "function", "signature": "(monkeypatch, service)"}, {"_type": "tag", "name": "test_kickoff_advances_stages_to_succeeded", "path": "/home/kavia/workspace/code-generation/certificationtest-198-341/CertificationService/tests/test_service.py", "pattern": "/^async def test_kickoff_advances_stages_to_succeeded(service):$/", "language": "Python", "kind": "function", "signature": "(service)"}, {"_type": "tag", "name": "test_update_stage_status_flow", "path": "/home/kavia/workspace/code-generation/certificationtest-198-341/CertificationService/tests/test_service.py", "pattern": "/^async def test_update_stage_status_flow(service):$/", "language": "Python", "kind": "function", "signature": "(service)"}], "hash": "b5453b4d1321e63774e8abfe1b318f0a", "format-version": 4, "code-base-name": "CertificationService", "filename": "CertificationService/tests/test_service.py", "revision_history": [{"28": ""}]}