{"is_source_file": true, "format": "Python", "description": "This is a source file for an API service in a certification workflow system. It defines classes and methods for interacting with external services (like an execution engine and notification system), managing workflows, and handling stage progress and statuses within the certification process.", "external_files": ["./models", "./repository"], "external_methods": ["compute_overall_status", "init_stage_results", "new_workflow_id"], "published": ["ExecutionServiceClient", "NotificationClient", "CertificationWorkflowService"], "classes": [{"name": "ExecutionServiceClient", "description": "Client for communicating with an external execution service, triggering stages asynchronously."}, {"name": "NotificationClient", "description": "Stub client for sending notifications, such as emails or webhooks."}, {"name": "CertificationWorkflowService", "description": "Main business logic class orchestrating workflow creation, stage management, and coordination with external services."}], "methods": [{"name": "str trigger_stage( self, workflow_id: str, stage: CertificationStage, git: GitInfo, metadata: Dict[str, str], )", "description": "Asynchronously triggers a certification stage execution via external service.", "scope": "ExecutionServiceClient", "scopeKind": "class"}, {"name": "None notify(self, config: Optional[NotificationConfig], message: str)", "description": "Sends a notification message based on configuration.", "scope": "NotificationClient", "scopeKind": "class"}, {"name": "Workflow create_workflow(self, req: WorkflowCreateRequest)", "description": "Creates a new certification workflow, initializes stages, and starts execution asynchronously.", "scope": "CertificationWorkflowService", "scopeKind": "class"}, {"name": "Optional[Workflow] get_workflow(self, workflow_id: str)", "description": "Retrieves a workflow instance by its ID.", "scope": "CertificationWorkflowService", "scopeKind": "class"}, {"name": "List[Workflow] list_workflows( self, *, script_path: Optional[str] = None, domain: Optional[str] = None, author: Optional[str] = None, branch: Optional[str] = None, commit: Optional[str] = None, stage: Optional[str] = None, status: Optional[str] = None, limit: int = 50, offset: int = 0, )", "description": "Lists workflows based on various filter criteria.", "scope": "CertificationWorkflowService", "scopeKind": "class"}, {"name": "Optional[Workflow] update_stage_status( self, workflow_id: str, req: WorkflowUpdateStatusRequest )", "description": "Updates the status and metadata of a specific stage within a workflow, typically via callback.", "scope": "CertificationWorkflowService", "scopeKind": "class"}, {"name": "__init__( self, repo: InMemoryWorkflowRepository, exec_client: ExecutionServiceClient, notifier: NotificationClient, )", "scope": "CertificationWorkflowService", "scopeKind": "class", "description": "unavailable"}, {"name": "None __init__(self, base_url: Optional[str] = None, timeout: float = 10.0)", "scope": "ExecutionServiceClient", "scopeKind": "class", "description": "unavailable"}, {"name": "None _kickoff_stages(self, workflow_id: str)", "scope": "CertificationWorkflowService", "scopeKind": "class", "description": "unavailable"}], "calls": ["asyncio.sleep", "self.repo.create", "self.repo.get", "self.repo.update", "compute_overall_status", "init_stage_results", "new_workflow_id", "self.notifier.notify", "self.exec_client.trigger_stage"], "search-terms": ["CertificationWorkflowService", "trigger_stage", "update_stage_status", "create_workflow", "NotificationClient", "ExecutionServiceClient"], "state": 2, "file_id": 7, "knowledge_revision": 21, "git_revision": "", "revision_history": [{"14": ""}, {"20": ""}, {"21": ""}], "ctags": [{"_type": "tag", "name": "CertificationWorkflowService", "path": "/home/kavia/workspace/code-generation/certificationtest-198-341/CertificationService/src/api/service.py", "pattern": "/^class CertificationWorkflowService:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "ExecutionServiceClient", "path": "/home/kavia/workspace/code-generation/certificationtest-198-341/CertificationService/src/api/service.py", "pattern": "/^class ExecutionServiceClient:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "NotificationClient", "path": "/home/kavia/workspace/code-generation/certificationtest-198-341/CertificationService/src/api/service.py", "pattern": "/^class NotificationClient:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "StageEnum", "path": "/home/kavia/workspace/code-generation/certificationtest-198-341/CertificationService/src/api/service.py", "pattern": "/^            from .models import CertificationStage as StageEnum$/", "file": true, "language": "Python", "kind": "unknown", "scope": "CertificationWorkflowService.list_workflows", "scopeKind": "member", "nameref": "unknown:CertificationStage"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/certificationtest-198-341/CertificationService/src/api/service.py", "pattern": "/^    def __init__($/", "language": "Python", "kind": "member", "signature": "( self, repo: InMemoryWorkflowRepository, exec_client: ExecutionServiceClient, notifier: NotificationClient, )", "scope": "CertificationWorkflowService", "scopeKind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/certificationtest-198-341/CertificationService/src/api/service.py", "pattern": "/^    def __init__(self, base_url: Optional[str] = None, timeout: float = 10.0) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self, base_url: Optional[str] = None, timeout: float = 10.0)", "scope": "ExecutionServiceClient", "scopeKind": "class"}, {"_type": "tag", "name": "_kickoff_stages", "path": "/home/kavia/workspace/code-generation/certificationtest-198-341/CertificationService/src/api/service.py", "pattern": "/^    async def _kickoff_stages(self, workflow_id: str) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self, workflow_id: str)", "scope": "CertificationWorkflowService", "scopeKind": "class"}, {"_type": "tag", "name": "create_workflow", "path": "/home/kavia/workspace/code-generation/certificationtest-198-341/CertificationService/src/api/service.py", "pattern": "/^    async def create_workflow(self, req: WorkflowCreateRequest) -> Workflow:$/", "language": "Python", "typeref": "typename:Workflow", "kind": "member", "signature": "(self, req: WorkflowCreateRequest)", "scope": "CertificationWorkflowService", "scopeKind": "class"}, {"_type": "tag", "name": "get_workflow", "path": "/home/kavia/workspace/code-generation/certificationtest-198-341/CertificationService/src/api/service.py", "pattern": "/^    def get_workflow(self, workflow_id: str) -> Optional[Workflow]:$/", "language": "Python", "typeref": "typename:Optional[Workflow]", "kind": "member", "signature": "(self, workflow_id: str)", "scope": "CertificationWorkflowService", "scopeKind": "class"}, {"_type": "tag", "name": "list_workflows", "path": "/home/kavia/workspace/code-generation/certificationtest-198-341/CertificationService/src/api/service.py", "pattern": "/^    def list_workflows($/", "language": "Python", "typeref": "typename:List[Workflow]", "kind": "member", "signature": "( self, *, script_path: Optional[str] = None, domain: Optional[str] = None, author: Optional[str] = None, branch: Optional[str] = None, commit: Optional[str] = None, stage: Optional[str] = None, status: Optional[str] = None, limit: int = 50, offset: int = 0, )", "scope": "CertificationWorkflowService", "scopeKind": "class"}, {"_type": "tag", "name": "notify", "path": "/home/kavia/workspace/code-generation/certificationtest-198-341/CertificationService/src/api/service.py", "pattern": "/^    async def notify(self, config: Optional[NotificationConfig], message: str) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self, config: Optional[NotificationConfig], message: str)", "scope": "NotificationClient", "scopeKind": "class"}, {"_type": "tag", "name": "trigger_stage", "path": "/home/kavia/workspace/code-generation/certificationtest-198-341/CertificationService/src/api/service.py", "pattern": "/^    async def trigger_stage($/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "( self, workflow_id: str, stage: CertificationStage, git: GitInfo, metadata: Dict[str, str], )", "scope": "ExecutionServiceClient", "scopeKind": "class"}, {"_type": "tag", "name": "update_stage_status", "path": "/home/kavia/workspace/code-generation/certificationtest-198-341/CertificationService/src/api/service.py", "pattern": "/^    def update_stage_status($/", "language": "Python", "typeref": "typename:Optional[Workflow]", "kind": "member", "signature": "( self, workflow_id: str, req: WorkflowUpdateStatusRequest )", "scope": "CertificationWorkflowService", "scopeKind": "class"}], "hash": "f2dccf2e8f0267a625af8048329c7f14", "format-version": 4, "code-base-name": "CertificationService", "filename": "CertificationService/src/api/service.py"}